generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String         @id @default(uuid())
  email                        String         @unique
  password                     String
  name                         String
  username                     String         @unique
  deviceType                   String
  deviceToken                  String         // unique identifier for push notifications
  notificationsEnabled         Boolean
  createdAt                    DateTime       @default(now())
  updatedAt                    DateTime       @updatedAt

  location                     Location?
  questions                    Question[]
  answers                      Answer[]
  rating                       UserRating?
  transactions                 Transaction[]

  @@map("users")  // This will map the User model to the "users" table in SQL
}

model Location {
  id                  String    @id @default(uuid())
  userId              String    @unique
  latitude            Float
  longitude           Float
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  user                User      @relation(fields: [userId], references: [id])

  @@map("locations")  // This will map the Location model to the "locations" table in SQL
}

model Question {
  id                      String   @id @default(uuid())
  title                   String
  content                 String
  location                String  // coordinates of the place the user is asking about, e.g: 
  userId                  String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  answers                 Answer[]
  user                    User            @relation(fields: [userId], references: [id])

  @@map("questions")  // This will map the Question model to the "questions" table in SQL
}

model Answer {
  id         String          @id @default(uuid())
  content    String
  questionId String
  userId     String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt

  question   Question        @relation(fields: [questionId], references: [id])
  user       User            @relation(fields: [userId], references: [id])
  rating     AnswerRating?

  @@map("answers")  // This will map the Answer model to the "answers" table in SQL
}

model Transaction {
  id         String        @id @default(uuid())
  amount     Float
  userId     String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  user       User          @relation(fields: [userId], references: [id])

  @@map("transactions")  // This will map the Transaction model to the "transactions" table in SQL
}

// questionCreator rates a responder's answer to a question
model AnswerRating {
  id                    String      @id @default(uuid())
  answerId              String      @unique
  rating                Int         // min 0, max 5
  feedback              String?     // optional field
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  answer                Answer      @relation(fields: [answerId],  references: [id])   // Optional relation

  @@map("answer_ratings")  // This will map the AnswerRating model to the "answer_ratings" table in SQL
}


model UserRating {
  id                    String      @id @default(uuid())
  userId                String      @unique      
  totalRating           Int         // min 0, max 5
  answersCount          Int
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  user                  User       @relation(fields: [userId], references: [id])

  @@map("user_ratings")  // This will map the UserRating model to the "user_ratings" table in SQL
}
