generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  username  String   @unique
  latitude   Float
  longitude  Float
  questions Question[]
  answers   Answer[]
  questionerRatings Rating[] @relation("QuestionerRatings")
  responderRatings Rating[] @relation("ResponderRatings")
  transactions Transaction[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Question {
  id                      String   @id @default(uuid())
  title                   String
  content                 String
  location                String  // coordinates of the place the user is asking about, e.g: 
  userId                  String
  answers                 Answer[]
  ratings                 Rating[]  // Inverse relation added here
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  user                    User      @relation(fields: [userId], references: [id])
}

model Answer {
  id        String   @id @default(uuid())
  content    String
  questionId String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Transaction {
  id         String   @id @default(uuid())
  amount     Float
  userId     String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

// questioner rates a responder's response to a question
model Rating {
  id               String      @id @default(uuid())
  questionId       String
  questionerId     String      // id of the person (the questioner) that rates a responder
  responderId      String      // id of the person (the responder) that is being rated
  createdAt        DateTime    @default(now())
  rating           Int         @default(0)
  feedback         String?

  questioner       User        @relation("QuestionerRatings", fields: [questionerId], references: [id]) // the person (the questioner) that rates a responder
  responder        User        @relation("ResponderRatings", fields: [responderId],  references: [id]) // the person (the responder) that is being rated
  question         Question    @relation(fields: [questionId],  references: [id])   // Optional relation
}
